import React, {useContext, useState} from "react";
import './index.css'
import {useLocale} from "../../hooks/useLocale";
import LocaleContext from "../../LocaleContext";

export const LocaleSelector = () => {
  const [isOpened, setIsOpened] = useState(false)
  const {setLocale, locale} = useContext(LocaleContext)
  const [selected, setSelected] = useState(locale)


  return (
    <div className={'locale-selector'}>
      <button className={`locale-button ${isOpened ? 'opened': ''} ${locale === 'en' ? 'selected': ''}`} style={isOpened ? {left: 30}: {}} onClick={()=>{
        setLocale("en")
        setSelected('en')
        setIsOpened(false)
      }}>
        <span className={'inner-text'}>EN</span>
      </button>
      <button className={`locale-button ${isOpened ? 'opened': ''} ${locale === 'ru' ? 'selected': ''}`} style={isOpened ? {left: -30}: {}} onClick={()=>{
        setLocale("ru")
        setSelected('ru')
        setIsOpened(false)
      }}>
        <span className={'inner-text'}>RU</span>
      </button>
      <button className={`locale-button`} style={{background: "none", zIndex: 4}} onClick={() => {
        setIsOpened(!isOpened)
      }}>
        <svg width="40" height="40" viewBox="0 0 40 40" fill="none" xmlns="http://www.w3.org/2000/svg">
          <g clipPath="url(#clip0_1_2)">
            <path d="M19.555 52.6946C20.5417 52.6946 21.4691 52.353 22.3373 51.6699C23.2055 50.9869 23.9692 50.0286 24.6285 48.7952C25.2879 47.5618 25.805 46.1125 26.1798 44.4475C26.5545 42.7825 26.742 40.9679 26.742 39.004C26.742 37.0401 26.5569 35.2208 26.1869 33.5462C25.8169 31.8716 25.3022 30.4153 24.6428 29.1771C23.9834 27.939 23.2197 26.9784 22.3515 26.2953C21.4835 25.6122 20.5512 25.2706 19.555 25.2706C18.5588 25.2706 17.6267 25.6122 16.7586 26.2953C15.8905 26.9784 15.1291 27.939 14.4744 29.1771C13.8198 30.4153 13.3051 31.8716 12.9303 33.5462C12.5556 35.2208 12.3682 37.0401 12.3682 39.004C12.3682 40.9679 12.5556 42.7825 12.9303 44.4475C13.3051 46.1125 13.8222 47.5618 14.4816 48.7952C15.141 50.0286 15.9047 50.9869 16.7728 51.6699C17.6409 52.353 18.5683 52.6946 19.555 52.6946ZM19.555 26.9926C20.2476 26.9926 20.9118 27.3128 21.5475 27.9533C22.1831 28.5937 22.7476 29.4689 23.241 30.5789C23.7343 31.689 24.1234 32.9675 24.408 34.4143C24.6926 35.8612 24.8349 37.3911 24.8349 39.004C24.8349 40.5979 24.6926 42.1111 24.408 43.5438C24.1234 44.9764 23.7343 46.2502 23.241 47.3649C22.7476 48.4797 22.1831 49.3573 21.5475 49.9977C20.9118 50.6382 20.2476 50.9584 19.555 50.9584C18.8624 50.9584 18.1984 50.6382 17.5626 49.9977C16.927 49.3573 16.3625 48.4797 15.8691 47.3649C15.3757 46.2502 14.9868 44.9764 14.7021 43.5438C14.4175 42.1111 14.2752 40.5979 14.2752 39.004C14.2752 37.3911 14.4175 35.8612 14.7021 34.4143C14.9868 32.9675 15.3757 31.689 15.8691 30.5789C16.3625 29.4689 16.927 28.5937 17.5626 27.9533C18.1984 27.3128 18.8624 26.9926 19.555 26.9926ZM18.63 25.4699V52.4243H20.4943V25.4699H18.63ZM19.555 44.3265C18.0939 44.3265 16.7088 44.4475 15.3995 44.6894C14.0902 44.9313 12.9113 45.2777 11.863 45.7284C10.8146 46.1789 9.95832 46.7079 9.29417 47.3152L10.7316 48.4963C11.3577 48.0029 12.1096 47.5831 12.9872 47.2369C13.8648 46.8905 14.8563 46.6296 15.9616 46.4542C17.067 46.2786 18.2647 46.1908 19.555 46.1908C20.8453 46.1908 22.0432 46.2786 23.1485 46.4542C24.2538 46.6296 25.2453 46.8905 26.1229 47.2369C27.0005 47.5831 27.7524 48.0029 28.3785 48.4963L29.8159 47.3152C29.1517 46.7079 28.2955 46.1789 27.2471 45.7284C26.1988 45.2777 25.02 44.9313 23.7106 44.6894C22.4014 44.4475 21.0161 44.3265 19.555 44.3265ZM32.6906 38.0363H6.41945V39.9005H32.6906V38.0363ZM19.555 33.6956C21.0161 33.6956 22.4014 33.5747 23.7106 33.3327C25.02 33.0908 26.1988 32.7445 27.2471 32.2938C28.2955 31.8432 29.1517 31.3143 29.8159 30.707L28.3785 29.5258C27.7524 30.0192 27.0005 30.439 26.1229 30.7853C25.2453 31.1316 24.2538 31.3925 23.1485 31.568C22.0432 31.7436 20.8453 31.8313 19.555 31.8313C18.2647 31.8313 17.067 31.7436 15.9616 31.568C14.8563 31.3925 13.8648 31.1316 12.9872 30.7853C12.1096 30.439 11.3577 30.0192 10.7316 29.5258L9.29417 30.707C9.95832 31.3143 10.8146 31.8432 11.863 32.2938C12.9113 32.7445 14.0902 33.0908 15.3995 33.3327C16.7088 33.5747 18.0939 33.6956 19.555 33.6956ZM19.555 53.4916C21.5379 53.4916 23.4047 53.112 25.1552 52.353C26.9056 51.594 28.4497 50.5457 29.7875 49.2079C31.1252 47.8702 32.1735 46.326 32.9325 44.5756C33.6917 42.8251 34.0713 40.9585 34.0713 38.9755C34.0713 36.9925 33.6917 35.1259 32.9325 33.3754C32.1735 31.6249 31.1252 30.0808 29.7875 28.7431C28.4497 27.4053 26.9032 26.357 25.148 25.598C23.3928 24.8389 21.5237 24.4594 19.5408 24.4594C17.5579 24.4594 15.6912 24.8389 13.9407 25.598C12.1903 26.357 10.6485 27.4053 9.31554 28.7431C7.98252 30.0808 6.93651 31.6249 6.17751 33.3754C5.41849 35.1259 5.03899 36.9925 5.03899 38.9755C5.03899 40.9585 5.41849 42.8251 6.17751 44.5756C6.93651 46.326 7.98489 47.8702 9.32265 49.2079C10.6604 50.5457 12.2045 51.594 13.955 52.353C15.7055 53.112 17.5721 53.4916 19.555 53.4916ZM19.555 51.5561C17.8378 51.5561 16.2202 51.2264 14.7021 50.567C13.1841 49.9076 11.8464 48.9992 10.6889 47.8417C9.53139 46.6842 8.62295 45.3465 7.96355 43.8284C7.30417 42.3104 6.97448 40.6928 6.97448 38.9755C6.97448 37.2582 7.30417 35.6406 7.96355 34.1226C8.62295 32.6046 9.52902 31.2668 10.6818 30.1093C11.8345 28.9518 13.1699 28.0434 14.6879 27.384C16.206 26.7246 17.8236 26.3949 19.5408 26.3949C21.2581 26.3949 22.8757 26.7246 24.3937 27.384C25.9117 28.0434 27.2519 28.9518 28.4141 30.1093C29.5764 31.2668 30.4872 32.6046 31.1466 34.1226C31.806 35.6406 32.1357 37.2582 32.1357 38.9755C32.1357 40.6928 31.806 42.3104 31.1466 43.8284C30.4872 45.3465 29.5787 46.6842 28.4212 47.8417C27.2638 48.9992 25.926 49.9076 24.408 50.567C22.89 51.2264 21.2723 51.5561 19.555 51.5561Z" fill="white"/>
          </g>
          <defs>
            <clipPath id="clip0_1_2">
              <rect width="30" height="30" fill="white" transform="translate(5 10)"/>
            </clipPath>
          </defs>
        </svg>
      </button>
    </div>
  );
};